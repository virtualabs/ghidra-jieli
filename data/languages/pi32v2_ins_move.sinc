##################
#
# Move
#
##################

###########################################################################################
# Register move
###########################################################################################

#
# sp = usp
# => mov sp, usp
#
:mov sp, usp is group=0 & ins0012=0x1440 & sp & usp
{
	sp = usp;
}

#
# sp = ssp
# => mov sp, ssp
#
:mov sp, ssp is group=0 & ins0012=0x1441 & sp & ssp
{
	sp = ssp;
}

#
# usp = sp
# => mov usp, sp
#
:mov usp, sp is group=0 & ins0012=0x1442 & sp & usp
{
	usp = sp;
}

#
# ssp = sp
# => mov ssp, sp
#
:mov ssp, sp is group=0 & ins0012=0x1443 & sp & ssp
{
	ssp = sp;
}

#
# rA_rA = rB_rB
# => mov rA_rA, rB_rB
#
:mov dregA, dregB is group=0 & ins0812=0x15 & dregA & dregB
{
	dregA = dregB;
}

#
# rA = rB
# => mov rA, rB
#
:mov regA, regB is group=0 & ins0812=0x16 & regA & regB
{
	regA = regB;
}

#################################################################
# Special registers move
#################################################################

#
# regA = sregB
#
:mov eregA, esregC is group=7 & ins0012=0x64 ; eregA & esregC
{
    eregA = esregC;
}

#
# sregB = regA
#
:mov esregC, eregA is group=7 & ins0012=0x64 ; eregA & esregC & imm1623=0x80
{
    esregC = eregA;
}

#################################################################
# Bitmask register move
#################################################################

#
# rA = mask (32 bits)
#
:mov eregA, #bitmask12 is group=7 & ins0012=0x60 ; eregA & imm2627>0 & bitmask12
{
    eregA = bitmask12;
}

#
# rA = mask (8-bit repeated)
#
:mov eregA, #bitmask is group=7 & ins0012=0x60 ; eregA & imm1623 & imm2425=3 & imm2627=0
[ bitmask = (imm1623 << 24) | (imm1623 << 16) | (imm1623 << 8) | imm1623; ]
{
    eregA = bitmask;
}

#
# rA = mask (16-bit repeated)
#
:mov eregA, #bitmask is group=7 & ins0012=0x60 ; eregA & imm1623 & imm2425=1 & imm2627=0
[ bitmask = (imm1623 << 24) | (imm1623 << 8); ]
{
    eregA = bitmask;
}

###########################################################################################
# Zero-extend byte
###########################################################################################

#
# rA = rB.b0 (u)
# => uxtb rA, rB
#
:uxtb regAl, regBl is group=0 & ins0712=0x2E & ins0303=0 & regAl & regBl
{
	regAl = zext(regBl:1);
}

###########################################################################################
# Zero-extend halfword
###########################################################################################

#
# rA = rB.b0 (s)
# => sxtb rA, rB
#
:sxtb regAl, regBl is group=0 & ins0712=0x2E & ins0303=1 & regAl & regBl
{
	regAl = sext(regBl:1);
}

###########################################################################################
# Sign-extend byte
###########################################################################################

#
# rA = rB.l (u)
# => uxth rA, rB
#
:uxth regAl, regBl is group=0 & ins0712=0x2F & ins0303=0 & regAl & regBl
{
	regAl = zext(regBl:2);
}

###########################################################################################
# Sign-extend halfword
###########################################################################################

#
# rA = rB.l (s)
# => sxth rA, rB
#
:sxth regAl, regBl is group=0 & ins0712=0x2F & ins0303=1 & regAl & regBl
{
	regAl = sext(regBl:2);
}
