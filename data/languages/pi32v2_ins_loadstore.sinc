##################
#
# Load/Store
#
##################

###########################################################################################
# Load Double Word
###########################################################################################

#
# r1_r0 = *:8 [rB + imm24]
# => ldw r1_r0, [rB + imm24]
#
:ldw edregA, [eregB + imm24] is group=7 & ins0412=0xc5 & imm0003 ; edregA & eregB & imm2427 & imm1719 & imm1616=0
[ imm24 = (imm0003<<16) | (imm2427 << 8) | (imm1719 << 1); ]
{
    local addr = eregB + imm24;
    edregA = *:8 addr;
}

#
# rA = [rB+#imm11s]
# addldw rA, rB, #imm11s
# 
:ldw eregA, eregB, #imm11 is group=7 & ins0412=0xCD & imm0002s & ins0303=0 ; eregA & eregB & imm2427 & imm1819 & imm1617=0
[imm11 = (imm0002s << 8) | (imm2427 << 4) | (imm1819 << 2);]
{
    tmp = eregB + imm11;
    eregA = *:4 tmp;
}

#
# rA = [++rB=#imm11s]
# addldw rA, rB, #imm11s
# 
:addldw eregA, eregB, #imm11 is group=7 & ins0412=0xCD & imm0002s & ins0303=0 ; eregA & eregB & imm2427 & imm1819 & imm1617=2
[imm11 = (imm0002s << 8) | (imm2427 << 4) | (imm1819 << 2);]
{
    eregB = eregB + imm11;
    eregA = *:4 eregB;
}

#
# rA = [++rB=rC]
# addldw rA, rB, rC
# 
:addldw eregA, eregB, eregC is group=7 & ins0412=0xCD & ins0003=0xC ; eregA & eregB & eregC & imm1617=2
{
    eregB = eregB + eregC;
    eregA = *:4 eregB;
}


###########################################################################################
# Load Word
###########################################################################################

#
# rA = [rB ++= 4]
# => lw rA, [rB ++= 4]
#
:lw regAl, [regBl ++= 4] is group=0 & ins0712=0x0A & ins0303=0 & regAl & regBl
{
	regAl = *:4 regBl;
	regBl = regBl + 4;
}

#
# rA = [rB ++= -4]
# => lw rA, [rB --= 4]
#
:lw regAl, [regBl --= 4] is group=0 & ins0712=0x0A & ins0303=1 & regAl & regBl
{
	regAl = *:4 regBl;
	regBl = regBl - 4;
}

#
# rA = [rB+simm7m4]
# => lw rA, [rB + simm7m4]
#
:lw regAl, [regBl + simm7m4] is group=3 & ins0707=0 & ins0303=0 & regAl & regBl & imm0812s
[ simm7m4 = (imm0812s << 2); ]
{
	local addr:4 = regBl + simm7m4;
	regAl = *:4 addr;
}

###########################################################################################
# Load Halfword (zero extend)
###########################################################################################

#
# rA = h[rB ++= 2] (u)
# => lh.z rA, [rB ++= 2]
#
:lh.z regAl, [regBl ++= 2] is group=0 & ins0712=0x0C & ins0303=0 & regAl & regBl
{
	regAl = zext(*:2 regBl);
	regBl = regBl + 2;
}

#
# rA = h[rB ++= -2] (u)
# => lh.z rA, [rB --= 2]
#
:lh.z regAl, [regBl --= 2] is group=0 & ins0712=0x0C & ins0303=1 & regAl & regBl
{
	regAl = zext(*:2 regBl);
	regBl = regBl - 2;
}

#
# rA = h[rB+simm6m2] (u)
# => lh.z rA, [rB + simm6m2]
#
:lh.z regAl, [regBl + simm6m2] is group=3 & ins0707=0 & ins0303=1 & regAl & regBl & imm0812s
[ simm6m2 = (imm0812s << 1); ]
{
	local addr:4 = regBl + simm6m2;
	regAl = zext(*:2 addr);
}

###########################################################################################
# Load Byte (zero extend)
###########################################################################################

#
# rA = b[rB ++= 1] (u)
# => lb.z rA, [rB ++= 1]
#
:lb.z regAl, [regBl ++= 2] is group=0 & ins0712=0x0E & ins0303=0 & regAl & regBl
{
	regAl = zext(*:1 regBl);
	regBl = regBl + 1;
}

#
# rA = b[rB ++= -1] (u)
# => lb.z rA, [rB --= 1]
#
:lb.z regAl, [regBl --= 1] is group=0 & ins0712=0x0E & ins0303=1 & regAl & regBl
{
	regAl = zext(*:1 regBl);
	regBl = regBl - 1;
}

#
# rA = b[rB+simm5] (u)
# => lb.z rA, [rB + simm5]
#
:lb.z regAl, [regBl + imm0812s] is group=2 & ins0707=0 & ins0303=1 & regAl & regBl & imm0812s
{
	local addr:4 = regBl + imm0812s;
	regAl = zext(*:1 addr);
}

#
# rA = b[rB+imm16] (u)
# => lb.z rA, [rB + imm16]
#
:lb.z eregA, [eregB + imm16] is group=7 & ins0012=0xe50 ; eregA & eregB & imm1619 & imm2427
[ imm16 = (imm2427 << 8) | imm1619; ]
{
	local addr:4 = eregB + imm16;
	eregA = zext(*:1 addr);
}

###########################################################################################
# Store Double Word
###########################################################################################

#
# *:8 [rB + imm24] = r1_r0
# => sdw r1_r0, [rB + imm24]
#
:sdw edregA, [eregB + imm24] is group=7 & ins0412=0xc5 & imm0003 ; edregA & eregB & imm2427 & imm1719 & imm1616=1
[ imm24 = (imm0003<<16) | (imm2427 << 8) | (imm1719 << 1); ]
{
    local addr = eregB + imm24;
    *:8 addr = edregA;
}

#
# [++rB=#imm11s] = rA
# addsdw rA, rB, #imm11s
# 
:addsdw eregA, eregB, #imm11 is group=7 & ins0412=0xCD & imm0002s & ins0303=0 ; eregA & eregB & imm2427 & imm1819 & imm1617=3
[imm11 = (imm0002s << 8) | (imm2427 << 4) | (imm1819 << 2);]
{
    eregB = eregB + imm11;
    eregA = *:4 eregB;
}

#
# [++rB=rC] = rA
# addsdw rA, rB, rC
# 
:addsdw eregA, eregB, eregC is group=7 & ins0412=0xCD & ins0003=0xC ; eregA & eregB & eregC & imm1617=3
{
    eregB = eregB + eregC;
    eregA = *:4 eregB;
}


###########################################################################################
# Store Word
###########################################################################################

#
# [rB ++= 4] = rA
# => sw rA, [rB ++= 4]
#
:sw regAl, [regBl ++= 4] is group=0 & ins0712=0x0B & ins0303=0 & regAl & regBl
{
	*:4 regBl = regAl;
	regBl = regBl + 4;
}

#
# [rB ++= -4] = rA
# => sw rA, [rB --= 4]
#
:sw regAl, [regBl --= 4] is group=0 & ins0712=0x0B & ins0303=1 & regAl & regBl
{
	*:4 regBl = regAl;
	regBl = regBl - 4;
}

#
# [rB+simm7m4] = rA
# => sw rA, [rB + simm7m4]
#
:sw regAl, [regBl + simm7m4] is group=3 & ins0707=1 & ins0303=0 & regAl & regBl & imm0812s
[ simm7m4 = (imm0812s << 2); ]
{
	local addr:4 = regBl + simm7m4;
	*:4 addr = regAl:4;
}

#
# [rA + imm5m4] = imm10 (10 bits)
#
:sw imm1625, [eregA + offset] is group=7 & ins0512=0x52 & imm0004 ; imm1625 & imm2627=0 & eregA
[ offset = imm0004 * 4; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = imm1625;
}

#
# [rA + imm5m4] = imm32 (32 bits)
#
:sw v, [eregA + offset] is group=7 & ins0512=0x52 & imm0004 ; imm1622 & imm2325 & imm2627=1 & eregA
[ offset = imm0004 * 4; v = ( (0x80 | imm1622) << 24 ) >> imm2325; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = v;
}

#
# [rA + imm5m4] = imm24 (24 bits)
#
:sw v, [eregA + offset] is group=7 & ins0512=0x52 & imm0004 ; imm1622 & imm2325 & imm2627=2 & eregA
[ offset = imm0004 * 4; v = ( (0x80 | imm1622) << 16 ) >> imm2325; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = v;
}

#
# [rA + imm5m4] = imm16 (16 bits)
#
:sw v, [eregA + offset] is group=7 & ins0512=0x52 & imm0004 ; imm1622 & imm2325 & imm2627=3 & eregA
[ offset = imm0004 * 4; v = ( (0x80 | imm1622) << 8 ) >> imm2325; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = v;
}

###########################################################################################
# Store halfword
###########################################################################################

#
# h[rB ++= 2] = rA
# => sh rA, [rB ++= 2]
#
:sh regAl, [regBl ++= 2] is group=0 & ins0712=0x0D & ins0303=0 & regAl & regBl
{
	*:2 regBl = regAl:2;
	regBl = regBl + 2;
}

#
# h[rB ++= -2] = rA
# => sh rA, [rB --= 2]
#
:sh regAl, [regBl --= 2] is group=0 & ins0712=0x0D & ins0303=1 & regAl & regBl
{
	*:2 regBl = regAl:2;
	regBl = regBl - 2;
}

#
# h[rB+simm6m2] = rA
# => sh rA, [rB + simm6m2]
#
:sh regAl, [regBl + simm6m2] is group=3 & ins0707=1 & ins0303=1 & regAl & regBl & imm0812s
[ simm6m2 = (imm0812s << 1); ]
{
	local addr:4 = regBl + simm6m2;
	*:2 addr = regAl:2;
}

###########################################################################################
# Store Byte
###########################################################################################

#
# b[rB ++= 1] = rA
# => sb rA, [rB ++= 1]
#
:sb regAl, [regBl ++= 1] is group=0 & ins0712=0x0F & ins0303=0 & regAl & regBl
{
	*:1 regBl = regAl:1;
	regBl = regBl + 1;
}

#
# b[rB ++= -1] = rA
# => sb rA, [rB -= 1]
#
:sb regAl, [regBl --= 1] is group=0 & ins0712=0x0F & ins0303=1 & regAl & regBl
{
	*:1 regBl = regAl:1;
	regBl = regBl - 1;
}

#
# b[rB+simm5] = rA
# => sb rA, [rB + simm5]
#
:sb regAl, [regBl + imm0812s] is group=2 & ins0707=1 & ins0303=1 & regAl & regBl & imm0812s
{
	local addr:4 = regBl + imm0812s;
	*:1 addr = regAl:1;
}


