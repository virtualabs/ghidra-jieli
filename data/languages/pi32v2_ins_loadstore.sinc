##################
#
# Load/Store
#
##################


#########################################################
# Registers list helpers
#########################################################

macro putreg(reg) { mult_addr = mult_addr - 4; *mult_addr = reg; }
macro getreg(reg) { reg = *mult_addr; mult_addr = mult_addr + 4;}

# Read register from memory
ReadReg: r0 is counter=0 & r0 { getreg(r0); }
ReadReg: r1 is counter=1 & r1 {getreg(r1);}
ReadReg: r2 is counter=2 & r2 {getreg(r2);}
ReadReg: r3 is counter=3 & r3 {getreg(r3);}
ReadReg: r4 is counter=4 & r4 {getreg(r4);}
ReadReg: r5 is counter=5 & r5 {getreg(r5);}
ReadReg: r6 is counter=6 & r6 {getreg(r6);}
ReadReg: r7 is counter=7 & r7 {getreg(r7);}
ReadReg: r8 is counter=8 & r8 {getreg(r8);}
ReadReg: r9 is counter=9 & r9 {getreg(r9);}
ReadReg: r10 is counter=10 & r10 {getreg(r10);}
ReadReg: r11 is counter=11 & r11 {getreg(r11);}
ReadReg: r12 is counter=12 & r12 {getreg(r12);}
ReadReg: r13 is counter=13 & r13 {getreg(r13);}
ReadReg: r14 is counter=14 & r14 {getreg(r14);}
ReadReg: r15 is counter=15 & r15 {getreg(r15);}

# Pop registers based on counter
WriteReg: r0 is counter=0 & r0 {putreg(r0);}
WriteReg: r1 is counter=1 & r1 {putreg(r1);}
WriteReg: r2 is counter=2 & r2 {putreg(r2);}
WriteReg: r3 is counter=3 & r3 {putreg(r3);}
WriteReg: r4 is counter=4 & r4 {putreg(r4);}
WriteReg: r5 is counter=5 & r5 {putreg(r5);}
WriteReg: r6 is counter=6 & r6 {putreg(r6);}
WriteReg: r7 is counter=7 & r7 {putreg(r7);}
WriteReg: r8 is counter=8 & r8 {putreg(r8);}
WriteReg: r9 is counter=9 & r9 {putreg(r9);}
WriteReg: r10 is counter=10 & r10 {putreg(r10);}
WriteReg: r11 is counter=11 & r11 {putreg(r11);}
WriteReg: r12 is counter=12 & r12 {putreg(r12);}
WriteReg: r13 is counter=13 & r13 {putreg(r13);}
WriteReg: r14 is counter=14 & r14 {putreg(r14);}
WriteReg: r15 is counter=15 & r15 {putreg(r15);}

# Bit ops
NextReg: is epsilon [counter=counter+1;]{}
#PrevReg: is epsilon [counter=counter-1;]{}
RegInMap: is imm1631 [bitset=(imm1631 & (1 << counter))>>counter;]{}
WriteCurrentReg: WriteReg is WriteReg & bitset=1 [sep=1;]{}
WriteCurrentReg: is bitset=0 {}
ReadCurrentReg: ReadReg is ReadReg & bitset=1 [sep=1;]{}
ReadCurrentReg: is bitset=0 {}
RegSep: "," is  sep=1 & bitset=1 {}
RegSep: "" is sep=0 | bitset=0 {}

# Recursively generate our write registers
WriteRegsMap: WriteRegsMap^WriteCurrentReg^RegSep is counter<15 & RegInMap & RegSep & WriteCurrentReg & NextReg & WriteRegsMap
    { build WriteRegsMap; build WriteCurrentReg; }
WriteRegsMap: WriteCurrentReg is counter=15 & RegInMap & WriteCurrentReg {}
WriteRegs: WriteRegsMap is WriteRegsMap [bitset=0; counter=0; sep=0;] {}


# Recursively generate our read registers
ReadRegsMap: ReadRegsMap^ReadCurrentReg^RegSep is counter<15 & RegInMap & RegSep & ReadCurrentReg & NextReg & ReadRegsMap
    { build ReadRegsMap; build ReadCurrentReg; }
ReadRegsMap: ReadCurrentReg is counter=15 & RegInMap & ReadCurrentReg {}
ReadRegs: ReadRegsMap is ReadRegsMap [bitset=0; counter=0; sep=0;] {}

##############################################################
# Write a series of registers into [reg]
##############################################################

# Write a series of registers starting at [reg]
# sw {reg, reg, ...}, [reg]
#
:sw {WriteRegs}, [regA] is group=7 & ins0411=0xB2 & regA ; WriteRegs
{
    mult_addr = regA;
    build WriteRegs;
}

##############################################################
# Read a series of registers into [reg]
##############################################################

# Write a series of registers starting at [reg]
# sw {reg, reg, ...}, [reg]
#
:sw {ReadRegs}, [regA] is group=7 & ins0411=0xB0 & regA ; ReadRegs
{
    mult_addr = regA;
    build ReadRegs;
}

###########################################################################################
# Load Double Word
###########################################################################################

#
# r1_r0 = *:8 [rB + imm24]
# => ldw r1_r0, [rB + imm24]
#
:ldw edregA, [eregB + imm24] is group=7 & ins0411=0xc5 & imm0003 ; edregA & eregB & imm2427 & imm1819 & imm1617=0
[ imm24 = (imm0003<<16) | (imm2427 << 8) | (imm1819 << 2); ]
{
    local addr = eregB + imm24;
    edregA = *:8 addr;
}

#
# rA = [rB+#imm11s]
# addldw rA, rB, #imm11s
# 
:ldw eregA, eregB, #imm11 is group=7 & ins0411=0xCD & imm0002s & ins0303=0 ; eregA & eregB & imm2427 & imm1819 & imm1617=0
[imm11 = (imm0002s << 8) | (imm2427 << 4) | (imm1819 << 2);]
{
    tmp = eregB + imm11;
    eregA = *:4 tmp;
}

#
# rA = [++rB=#imm11s]
# addldw rA, rB, #imm11s
# 
:addldw eregA, eregB, #imm11 is group=7 & ins0411=0xCD & imm0002s & ins0303=0 ; eregA & eregB & imm2427 & imm1819 & imm1617=2
[imm11 = (imm0002s << 8) | (imm2427 << 4) | (imm1819 << 2);]
{
    eregB = eregB + imm11;
    eregA = *:4 eregB;
}

#
# rA = [++rB=rC]
# addldw rA, rB, rC
# 
:addldw eregA, eregB, eregC is group=7 & ins0411=0xCD & ins0003=0xC ; eregA & eregB & eregC & imm1617=2
{
    eregB = eregB + eregC;
    eregA = *:4 eregB;
}

# Load double word into register
# rA = [rB+]
#


###########################################################################################
# Load Word
###########################################################################################

#
# rA = [rB ++= 4]
# => lw rA, [rB ++= 4]
#
:lw regAl, [regBl ++= 4] is group=0 & ins0712=0x0A & ins0303=0 & regAl & regBl
{
	regAl = *:4 regBl;
	regBl = regBl + 4;
}

#
# rA = [rB ++= -4]
# => lw rA, [rB --= 4]
#
:lw regAl, [regBl --= 4] is group=0 & ins0712=0x0A & ins0303=1 & regAl & regBl
{
	regAl = *:4 regBl;
	regBl = regBl - 4;
}

#
# rA = [rB+simm7m4]
# => lw rA, [rB + simm7m4]
#
:lw regAl, [regBl + simm7m4] is group=3 & ins0707=0 & ins0303=0 & regAl & regBl & imm0812s
[ simm7m4 = (imm0812s << 2); ]
{
	local addr:4 = regBl + simm7m4;
	regAl = *:4 addr;
}

#
# rA = [rB+rC]
#
:lw eregA, [eregB+eregC] is group=7 & ins0011=0xcd8 ; eregA & eregB & eregC & imm1619=2
{
    addr:4 = eregB + eregC;
    eregA = *:4 addr;
}

#
# rA = [rB+rC<<2]
#
:lw eregA, [eregB+eregC<<2] is group=7 & ins0011=0xcd8 ; eregA & eregB & eregC & imm1619=0xa
{
    addr:4 = eregB + eregC<<2;
    eregA = *:4 addr;
}

#
# rA = [rB++=imm8]
#
:lw eregA, [eregB++=imm8] is group=7 & ins0011=0xcd8 ; eregA & eregB & eregC & imm1616=0 & imm1719 & imm2427
[ imm8 = (imm2427<<4) | imm1719<<1; ]
{
    eregA = *:4 eregB;
    eregB = eregB + imm8;
}

###########################################################################################
# Load Halfword (zero extend)
###########################################################################################

#
# rA = h[rB ++= 2] (u)
# => lh.z rA, [rB ++= 2]
#
:lh.z regAl, [regBl ++= 2] is group=0 & ins0712=0x0C & ins0303=0 & regAl & regBl
{
	regAl = zext(*:2 regBl);
	regBl = regBl + 2;
}

#
# rA = h[rB ++= -2] (u)
# => lh.z rA, [rB --= 2]
#
:lh.z regAl, [regBl --= 2] is group=0 & ins0712=0x0C & ins0303=1 & regAl & regBl
{
	regAl = zext(*:2 regBl);
	regBl = regBl - 2;
}

#
# rA = h[rB+simm6m2] (u)
# => lh.z rA, [rB + simm6m2]
#
:lh.z regAl, [regBl + simm6m2] is group=3 & ins0707=0 & ins0303=1 & regAl & regBl & imm0812s
[ simm6m2 = (imm0812s << 1); ]
{
	local addr:4 = regBl + simm6m2;
	regAl = zext(*:2 addr);
}

#
# rA = h[rB+rC] (u)
# => lh.z rA, [rB + rC]
#
:lh.z eregA, [eregB + eregC] is group=7 & ins0011=0xdd8 ; eregA & eregB & eregC & imm1619=0
{
	local addr:4 = eregB + eregC;
	eregA = zext(*:2 addr);
}

#
# rA = h[rB+rC<<1] (u)
# => lh.z rA, [rB + rC<<1]
#
:lh.z eregA, [eregB + eregC] is group=7 & ins0011=0xdd8 ; eregA & eregB & eregC & imm1619=8
{
	local addr:4 = eregB + eregC;
	eregA = zext(*:2 addr);
}

#
# rA = h[rB++=imm8] (u)
# => lh.z rA, [rB++=imm8]
#
:lh.z eregA, [eregB++=imm8] is group=7 & ins0011=0xdd0 ; eregA & eregB & eregC & imm1619 & imm2427
[ imm8 = (imm2427 << 4) | imm1619; ]
{
	local addr:4 = eregB + imm8;
	eregA = zext(*:2 addr);
}

#
# rA = h[rB+imm9] (u)
#
:lh.z eregA, [eregB + imm9] is group=7 & ins0411=0xd5 & ins0203=0 & imm0000 ; eregA & imm2427 & eregB & imm1619
[ imm9 = (imm0000 << 8) | (imm2427 << 4) | imm1619; ]
{
    addr:4 = eregB + imm9;
    eregA = zext(*:2 addr);
}

###########################################################################################
# Load Halfword (sign extend)
###########################################################################################

#
# rA = h[rB+rC] (s)
# => lh.s rA, [rB + rC]
#
:lh.s eregA, [eregB + eregC] is group=7 & ins0011=0xdd8 ; eregA & eregB & eregC & imm1619=2
{
	local addr:4 = eregB + eregC;
	eregA = sext(*:2 addr);
}

#
# rA = h[rB+rC<<1] (s)
# => lh.s rA, [rB + rC<<1]
#
:lh.s eregA, [eregB + eregC] is group=7 & ins0011=0xdd8 ; eregA & eregB & eregC & imm1619=0xa
{
	local addr:4 = eregB + eregC;
	eregA = sext(*:2 addr);
}

#
# rA = h[rB++=imm8] (s)
# => lh.s rA, [rB++=imm8]
#
:lh.s eregA, [eregB++=imm8] is group=7 & ins0011=0xdd4 ; eregA & eregB & eregC & imm1619 & imm2427
[ imm8 = (imm2427 << 4) | imm1619; ]
{
	local addr:4 = eregB + imm8;
	eregA = sext(*:2 addr);
}


#
# rA = h[rB+imm9] (s)
#
:lh.s eregA, [eregB + imm9] is group=7 & ins0411=0xd5 & ins0203=1 & imm0000 ; eregA & imm2427 & eregB & imm1619
[ imm9 = (imm0000 << 8) | (imm2427 << 4) | imm1619; ]
{
    addr:4 = eregB + imm9;
    eregA = sext(*:2 addr);
}


###########################################################################################
# Load Byte (sign-extend)
###########################################################################################

# Load byte pointed by rB+imm8 into rA, and then increment rB by imm8.
# rA = b[rB ++= imm8] (signed)
#
:lb.s eregA, [eregB ++= #imm8] is group=7 & ins0011=0xed4 ; eregA & eregB & imm1619 & imm2427
[ imm8 = (imm2427 << 4) | imm1619; ]
{
    addr:4 = eregB + imm8;
    eregA = sext(*:1 addr);
    eregB = eregB + imm8;
}

# Load byte pointed by rB+imm8 into rA, and then increment rB by imm8.
# rA = b[rB ++= imm8] (signed)
#
:lb.s eregA, [eregB+#imm8] is group=7 & ins0011=0xe54 ; eregA & eregB & imm1619 & imm2427
[ imm8 = (imm2427 << 4) | imm1619; ]
{
    addr:4 = eregB + imm8;
    eregA = sext(*:1 addr);
    eregB = eregB + imm8;
}

#
# rA = b[rB+rC] (s)
# => lb.z rA, [rB + rC]
#
:lb.z eregA, [eregB + eregC] is group=7 & ins0011=0xed8 ; eregA & eregB & eregC & imm1619=2
{
	local addr:4 = eregB + eregC;
	eregA = sext(*:1 addr);
}

###########################################################################################
# Load Byte (zero extend)
###########################################################################################

#
# rA = b[rB ++= 1] (u)
# => lb.z rA, [rB ++= 1]
#
:lb.z regAl, [regBl ++= 1] is group=0 & ins0712=0x0E & ins0303=0 & regAl & regBl
{
	regAl = zext(*:1 regBl);
	regBl = regBl + 1;
}

#
# rA = b[rB ++= -1] (u)
# => lb.z rA, [rB --= 1]
#
:lb.z regAl, [regBl --= 1] is group=0 & ins0712=0x0E & ins0303=1 & regAl & regBl
{
	regAl = zext(*:1 regBl);
	regBl = regBl - 1;
}

# 
# rA = b[++rB=imm8] (u)
# => lb.z rA, [++rB=imm8] (positive number)
#
:lb.z eregA, [++eregB=#imm8] is group=7 & ins0011=0xe58 ; eregA & eregB & imm1619 & imm2427
[ imm8 = (imm2427 << 4) | imm1619; ]
{
    eregB = eregB + imm8;
    eregA = *:1 eregB;
}

# 
# rA = b[++rB=imm8] (u)
# => lb.z rA, [++rB=-imm8] (negative number)
#
:lb.z eregA, [++eregB=#imm8] is group=7 & ins0011=0xe59 ; eregA & eregB & imm1619 & imm2427
[ imm8 = -((((1<<8) | (imm2427 << 4) | imm1619)^0x1ff) + 1); ]
{
    eregB = eregB + imm8;
    eregA = *:1 eregB;
}

#
# rA = b[rB+simm5] (u)
# => lb.z rA, [rB + simm5]
#
:lb.z regAl, [regBl + imm0812s] is group=2 & ins0707=0 & ins0303=1 & regAl & regBl & imm0812s
{
	local addr:4 = regBl + imm0812s;
	regAl = zext(*:1 addr);
}

#
# rA = b[rB+imm16] (u)
# => lb.z rA, [rB + imm16]
#
:lb.z eregA, [eregB + imm16] is group=7 & ins0011=0xe50 ; eregA & eregB & imm1619 & imm2427
[ imm16 = (imm2427 << 8) | imm1619; ]
{
	local addr:4 = eregB + imm16;
	eregA = zext(*:1 addr);
}

#
# rA = b[rB+rC] (u)
# => lb.z rA, [rB + rC]
#
:lb.z eregA, [eregB + eregC] is group=7 & ins0011=0xed8 ; eregA & eregB & eregC & imm1619=0
{
	local addr:4 = eregB + eregC;
	eregA = zext(*:1 addr);
}

#
# rA = b[++rB=rC] (u)
# => lb.z rA, [++rB = rC]
#
:lb.z eregA, [++eregB = eregC] is group=7 & ins0011=0xedc ; eregA & eregB & eregC & imm1619=0
{
    eregB = eregB + eregC;
    eregA = zext(*:1 eregB);
}

###########################################################################################
# Store Double Word
###########################################################################################

#
# *:8 [rB + imm10s] = r1_r0
# => sdw r1_r0, [rB + imm10s]
#
:sdw edregA, [eregB + imm10s] is group=7 & ins0411=0xc5 & ins0303=0 & imm0002s ; edregA & eregB & imm2427 & imm1819 & imm1617=1
[ imm10s = (imm0002s<<16) | (imm2427 << 4) | (imm1819 << 2); ]
{
    local addr = eregB + imm10s;
    *:8 addr = edregA;
}

#
# [++rB=#imm11s] = rA
# addsdw rA, rB, #imm11s
# 
:addsdw eregA, [++eregB=imm11] is group=7 & ins0411=0xCD & imm0002s & ins0303=0 ; eregA & eregB & imm2427 & imm1819 & imm1617=3
[imm11 = (imm0002s << 8) | (imm2427 << 4) | (imm1819 << 2);]
{
    eregB = eregB + imm11;
    *:4 eregB = eregA;
}

#
# [++rB=rC] = rA
# addsdw rA, rB, rC
# 
:addsdw eregA, eregB, eregC is group=7 & ins0411=0xCD & ins0003=0xC ; eregA & eregB & eregC & imm1617=3
{
    eregB = eregB + eregC;
    *:4 eregB = eregA;
}


###########################################################################################
# Store Word
###########################################################################################

#
# [rB ++= 4] = rA
# => sw rA, [rB ++= 4]
#
:sw regAl, [regBl ++= 4] is group=0 & ins0712=0x0B & ins0303=0 & regAl & regBl
{
	*:4 regBl = regAl;
	regBl = regBl + 4;
}

#
# [rB ++= -4] = rA
# => sw rA, [rB --= 4]
#
:sw regAl, [regBl --= 4] is group=0 & ins0712=0x0B & ins0303=1 & regAl & regBl
{
	*:4 regBl = regAl;
	regBl = regBl - 4;
}

#
# [rB+simm7m4] = rA
# => sw rA, [rB + simm7m4]
#
:sw regAl, [regBl + simm7m4] is group=3 & ins0707=1 & ins0303=0 & regAl & regBl & imm0812s
[ simm7m4 = (imm0812s << 2); ]
{
	local addr:4 = regBl + simm7m4;
	*:4 addr = regAl:4;
}

#
# [rA + imm5m4] = imm10 (10 bits)
#
:sw imm1625, [eregA + offset] is group=7 & ins0511=0x52 & imm0004 ; imm1625 & imm2627=0 & eregA
[ offset = imm0004 * 4; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = imm1625;
}

#
# [rA + imm5m4] = imm32 (32 bits)
#
:sw v, [eregA + offset] is group=7 & ins0511=0x52 & imm0004 ; imm1622 & imm2325 & imm2627=1 & eregA
[ offset = imm0004 * 4; v = ( (0x80 | imm1622) << 24 ) >> imm2325; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = v;
}

#
# [rA + imm5m4] = imm24 (24 bits)
#
:sw v, [eregA + offset] is group=7 & ins0511=0x52 & imm0004 ; imm1622 & imm2325 & imm2627=2 & eregA
[ offset = imm0004 * 4; v = ( (0x80 | imm1622) << 16 ) >> imm2325; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = v;
}

#
# [rA + imm5m4] = imm16 (16 bits)
#
:sw v, [eregA + offset] is group=7 & ins0511=0x52 & imm0004 ; imm1622 & imm2325 & imm2627=3 & eregA
[ offset = imm0004 * 4; v = ( (0x80 | imm1622) << 8 ) >> imm2325; ]
{
    local addr:4 = eregA + offset;
    *:4 addr = v;
}

#
# [rA + imm11s] = rB
#
:sw eregA, [eregB + imm11s] is group=7 & ins0411=0xCD & ins0303=0 & imm0002s ; eregA & eregB & imm1819 & imm2427 & imm1617=1
[imm11s = (imm0002s << 8) | (imm2427 << 4) | (imm1819 << 2);]
{
    addr = eregB + imm11s;
    *:4 addr = eregA;
}

#
# [rA+rB] = rC
#
:sw eregA, [eregB+eregC] is group=7 & ins0011=0xcd8 ; eregA & eregB & eregC & imm1619=3
{
    addr:4 = eregB + eregC;
    *:4 addr = eregA;
}

#
# [rA+rB<<2] = rC
#
:sw eregA, [eregB+eregC<<2] is group=7 & ins0011=0xcd8 ; eregA & eregB & eregC & imm1619=0xb
{
    addr:4 = eregB + eregC<<2;
    *:4 addr = eregA;
}

#
# [rB++=imm8] = rA
#
:sw eregA, [eregB++=imm8] is group=7 & ins0011=0xcd8 ; eregA & eregB & eregC & imm1617=1 & imm1819 & imm2427
[ imm8 = (imm2427<<4) | imm1819<<2; ]
{
    *:4 eregB = eregA;
    eregB = eregB + imm8;
}

###########################################################################################
# Store halfword
###########################################################################################

#
# h[rB ++= 2] = rA
# => sh rA, [rB ++= 2]
#
:sh regAl, [regBl ++= 2] is group=0 & ins0712=0x0D & ins0303=0 & regAl & regBl
{
	*:2 regBl = regAl:2;
	regBl = regBl + 2;
}

#
# h[rB ++= -2] = rA
# => sh rA, [rB --= 2]
#
:sh regAl, [regBl --= 2] is group=0 & ins0712=0x0D & ins0303=1 & regAl & regBl
{
	*:2 regBl = regAl:2;
	regBl = regBl - 2;
}

#
# h[rB+simm6m2] = rA
# => sh rA, [rB + simm6m2]
#
:sh regAl, [regBl + simm6m2] is group=3 & ins0707=1 & ins0303=1 & regAl & regBl & imm0812s
[ simm6m2 = (imm0812s << 1); ]
{
	local addr:4 = regBl + simm6m2;
	*:2 addr = regAl:2;
}

#
# h[rB+imm9s] = rAl
#
:sh eregA, [eregB + imm9s] is group=7 & ins0411=0xd5 & ins0203=0 & imm0002s ; eregA & imm2427 & eregB & imm1719 & imm1616=1
[ imm9s = (imm0002s << 8) | (imm2427 << 4) | (imm1719 << 1); ]
{
    addr:4 = eregB + imm9s;
    *:2 addr = eregA:2;
}

#
# h[rB + rC] = rAl
#
:sh eregA, [eregB + eregC] is group=7 & ins0011=0xdd8 ; eregA & eregB & eregC & imm1619=1
{
    addr:4 = eregB + eregC;
    *:2 addr = eregA:2;
}

#
# h[rB + rC<<1] = rAl
#
:sh eregA, [eregB + eregC] is group=7 & ins0011=0xdd8 ; eregA & eregB & eregC & imm1619=0x9
{
    addr:4 = eregB + eregC<<1;
    *:2 addr = eregA:2;
}

###########################################################################################
# Store Byte
###########################################################################################

#
# b[rB ++= 1] = rA
# => sb rA, [rB ++= 1]
#
:sb regAl, [regBl ++= 1] is group=0 & ins0712=0x0F & ins0303=0 & regAl & regBl
{
	*:1 regBl = regAl:1;
	regBl = regBl + 1;
}

#
# b[rB ++= -1] = rA
# => sb rA, [rB -= 1]
#
:sb regAl, [regBl --= 1] is group=0 & ins0712=0x0F & ins0303=1 & regAl & regBl
{
	*:1 regBl = regAl:1;
	regBl = regBl - 1;
}

#
# b[rB+simm5] = rA
# => sb rA, [rB + simm5]
#
:sb regAl, [regBl + imm0812s] is group=2 & ins0707=1 & ins0303=1 & regAl & regBl & imm0812s
{
	local addr:4 = regBl + imm0812s;
	*:1 addr = regAl:1;
}

#
# b[rB+simm8] = rA
# => sb rA, [rB + simm5]
#
:sb eregAl, [eregB + imm8] is group=7 & ins0411=0xe5 & imm0003=2 ; eregAl & imm2427 & eregB & imm1619
[ imm8 = imm1619 | (imm2427 << 4); ]
{
	local addr:4 = eregB + imm8;
	*:1 addr = eregAl:1;
}

#
# b[rB+rC] = rA
# => sb rA, [rB + rC]
#
:sb eregA, [eregB + eregC] is group=7 & ins0011=0xed8 ; eregA & eregB & eregC & imm1619=1
{
	local addr:4 = eregB + eregC;
	*:1 addr = eregA:1;
}

# Store byte in rB at b[rA+offset] and increment rA by offset.
# b[rA++=#imm8] = rB
# => sb rB, [rA++=#imm8]
#
:sb eregA, [eregB++=#imm8] is group=7 & ins0011=0xed2 ; eregA & eregB & imm1619 & imm2427
[ imm8 = (imm2427<<4) | imm1619; ]
{
    *:1 eregB = eregA:1;
    eregB = eregB + imm8;
}

#
# b[++rA=rB] = rC
# => sb rC, [++rA = rB]
#
:sb eregC, [++eregB = eregA] is group=7 & ins0011=0xedc ; eregA & eregB & eregC & imm1619=1
{
    eregB = eregB + eregA;
    *:1 eregB = eregC:1;
}