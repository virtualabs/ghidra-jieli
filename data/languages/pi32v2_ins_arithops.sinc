##################
#
# Arithmetic Operations
#
##################

###########################################################################################
# Add
###########################################################################################

#
# rA += rB
# => add rA, rB
#
:add regA, regB is group=0 & ins0812=0x18 & regA & regB
{
	regA = regA + regB;
}

#
# rA = rB + rC
# => add rA, rB, rC
#
:add regAl, regBl, regCxl is group=0 & ins0912=0xE & regAl & regBl & regCxl
{
	regAl = regBl + regCxl;
}

#
# rA += imm8
# => add rA, #imm8
#
:add regAl, #imm8 is group=1 & ins0607=3 & regAl & imm0305s & imm0812
[ imm8 = (imm0305s << 5) | imm0812; ]
{
	regAl = regAl + imm8;
}

#
# sp += imm10
# => add sp, #imm10
#
:add sp, #imm10 is group=4 & ins0004=0x02 & imm0812 & imm0507s & sp
[ imm10 = (imm0507s << 7) | (imm0812 << 2); ]
{
	sp = sp + imm10;
}

#
# rA = rB + imm5
# => add rA, rB, #imm5
#
:add regAl, regBl, #imm0812 is group=4 & ins0707=0 & ins0303=1 & regAl & regBl & imm0812
{
	regAl = regBl + imm0812;
}

#
# rA = sp + imm7
# => add rA, sp, #imm7
#
:add regAl, sp, #imm7 is group=4 & ins0707=1 & ins0304=1 & regAl & sp & imm0812 & imm0506
[ imm7 = (imm0506 << 5) | imm0812; ]
{
	regAl = sp + imm7;
}

#
# rA = rB = imm12
# => add rA, rb, #imm12
#
:add regA, eregA, #imm1627 is group=7 & ins0412=0x10 & regA ; eregA & imm1627
{
    regA = eregA + imm1627;
}


#
# [rA+#imm5] += #imm16s
# add [rA + #imm5], #imm16s
#
:add [eregA + offset], #imm1627s is group=7 & ins0512=0x5E & imm0004 ; eregA & imm1627s
[ offset = imm0004*4; ]
{
    addr:4 = eregA + offset;
    *:4 addr = *addr + imm1627s;
}

#
# [rA+#imm5] += rB
# add [rA + #imm5], rB
#
:add [eregA + offset], eregC is group=7 & ins0012=0x868 ; eregA & eregC & imm1617=0 & imm1823
[ offset = (imm1823<<2); ]
{
    addr:4 = eregA + offset;
    *:4 addr = *addr + eregC;
}


###########################################################################################
# Subtract
###########################################################################################

#
# rA = rB - rC
# => sub rA, rB, rC
#
:sub regAl, regBl, regCxl is group=0 & ins0912=0xF & regAl & regBl & regCxl
{
	regAl = regBl - regCxl;
}

#
# [rA+#imm5] -= rB
# sub [rA + #imm5], rB
#
:sub [eregA + offset], eregC is group=7 & ins0012=0x868 ; eregA & eregC & imm1617=2 & imm1823
[ offset = (imm1823<<2); ]
{
    addr:4 = eregA + offset;
    *:4 addr = *addr - eregC;
}

###########################################################################################
# Multiply
###########################################################################################

#
# rA *= rB
# => mul rA, rB
#
:mul regA, regB is group=0 & ins0812=0x1B & regA & regB
{
	regA = regA * regB;
}

#
# rA = rB * bitmask12
#
:mul regA, eregA, #bitmask12 is group=7 & ins0412=0x1e & regA ; eregA & imm1623 & bitmask12
{
    regA = eregA * bitmask12;
}
