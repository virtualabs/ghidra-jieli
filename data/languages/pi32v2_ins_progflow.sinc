##################
#
# Program Flow Control
#
##################

###########################################################################################
# Return from Subroutine/Interrupt/eXception/Emulation
###########################################################################################

#
# rts
#
:rts is group=0 & ins0012=0x0080
{
	return [rets];
}

#
# rti
#
:rti is group=0 & ins0012=0x0081
{
	return [reti];
}

#
# rtx
#
:rtx is group=0 & ins0012=0x0082
{
	return [retx];
}

#
# rte
#
:rte is group=0 & ins0012=0x0083
{
	return [rete];
}

###########################################################################################
# Call
###########################################################################################

#
# call rA
#
:call regA is group=0 & ins0412=0x00C & regA
{
	call regA;
}

#
# call reladdr9
#
:call jaddr9 is group=4 & ins0707=0 & ins0003=0x1 & jaddr9
{
	call jaddr9;
}

#
# call reladdr22
#
:call jaddr23 is (group=7 & ins0612=0x2A) ... & jaddr23
{
	call jaddr23;
}

#
# call reladdr32
#
:call jaddr32 is (group=7 & ins0012=0x1f80) ;  jaddr32
{
    call jaddr32;
}

###########################################################################################
# Goto (Jump)
###########################################################################################

#
# goto rA
#
:goto regA is group=0 & ins0412=0x00D & regA
{
	goto [regA];
}

#
# goto reladdr12
#
:goto jaddr12 is group=4 & ins0203=1 & jaddr12
{
	goto jaddr12;
}

#
# goto reladdr22
#
:goto jaddr23 is (group=7 & ins0612=0x2B) ... & jaddr23
{
	goto jaddr23;
}

###########################################################################################
# Table Branch
###########################################################################################

#
# tbb rA
#
:tbb regA is group=0 & ins0412=0x010 & regA
{
	local addr:4 = inst_next + regA;
	pc = inst_next + (zext(*:1 addr) << 1);
	goto [pc];
}

#
# tbh rA
#
:tbh regA is group=0 & ins0412=0x011 & regA
{
	local addr:4 = inst_next + regA;
	pc = inst_next + (zext(*:2 addr) << 1);
	goto [pc];
}

###########################################################################################
# Condititonal branch
###########################################################################################

#
# if (rA == 0) goto reladdr9
# => jz rA, reladdr9
#
:jz regAl, jaddr9 is group=2 & ins0707=0 & ins0303=0 & regAl & jaddr9
{
	if (regAl == 0)
		goto jaddr9;
}

#
# if (rA != 0) goto reladdr9
# => jnz rA, reladdr9
#
:jnz regAl, jaddr9 is group=2 & ins0707=1 & ins0303=0 & regAl & jaddr9
{
	if (regAl != 0)
		goto jaddr9;
}


#
# if (rA != #imm7) goto reladdr9
# => jne rA, #imm7, reladdr9
#
:jne regA, #imm2531, jaddr9e is group=7 & ins0812=0x18 & ins0407=8 & regA ; imm2531 & jaddr9e
{
	if (regA != imm2531)
		goto jaddr9e;
}

##
# Unsigned conditional jumps (reg/imm10/pcrel9m2)
##

#
# if (rA == imm10) goto pcrel9m2
#
:je regA, imm10, jaddr9e is group=7 & ins0712=0x30 & imm0406 & regA ; imm2531 & jaddr9e
[ imm10 = (imm0406 << 7) | imm2531; ]
{
    if (regA == imm10)
        goto jaddr9e;
}


#
# if (rA > imm10) goto pcrel9m2
#
:ja regA, imm10, jaddr9e is group=7 & ins0712=0x38 & imm0406 & regA ; imm2531 & jaddr9e
[ imm10 = (imm0406 << 7) | imm2531; ]
{
    if (regA > imm10)
        goto jaddr9e;
}

#
# if (rA >= imm10) goto pcrel9m2
#
:jae regA, imm10, jaddr9e is group=7 & ins0712=0x32 & imm0406 & regA ; imm2531 & jaddr9e
[ imm10 = (imm0406 << 7) | imm2531; ]
{
    if (regA >= imm10)
        goto jaddr9e;
}

#
# if (rA < imm10) goto pcrel9m2
#
:jb regA, imm10, jaddr9e is group=7 & ins0712=0x33 & imm0406 & regA ; imm2531 & jaddr9e
[ imm10 = (imm0406 << 7) | imm2531; ]
{
    if (regA < imm10)
        goto jaddr9e;
}

#
# if (rA >= imm10) goto pcrel9m2
#
:jbe regA, imm10, jaddr9e is group=7 & ins0712=0x39 & imm0406 & regA ; imm2531 & jaddr9e
[ imm10 = (imm0406 << 7) | imm2531; ]
{
    if (regA >= imm10)
        goto jaddr9e;
}

##
# Unsigned conditional jumps (reg/imm16/pcrel12m2)
##

#
# if (rA != #imm10s) goto pcrel16m2
#
:jne eregA, #imm1627, jaddr16e is group=7 & ins0012=0x1f01 ; eregA & imm1627 ; jaddr16e
{
    if (eregA != imm1627)
        goto jaddr16e;
}

#
# if (rA != #imm10s) goto pcrel9m2
#
:jne regA, #imm10s is group=7 & ins0712=0x31 & imm0406s & regA ; imm2531 & jaddr9e
[ imm10s = (imm0406s << 7) | imm2531; ]
{
    if (regA != imm10s)
        goto jaddr9e;
}

##
# Unsigned conditional jumps (reg/reg/imm10)
##

#
# if (rB < rA) goto reladdr9
# => jb rB, rA, reladdr9
#
:jb eregA, regA, jaddr9e is group=7 & ins0412=0x98 & regA; eregA & jaddr9e
{
    if (eregA < regA)
        goto jaddr9e;
}

# 
# if (rB > rA) goto reladdr9
# => ja rB, rA, reladdr9
#
:ja eregA, regA, jaddr9e is group=7 & ins0412=0xC0 & regA; eregA & jaddr9e
{
    if (eregA > regA)
        goto jaddr9e;
}

#
# if (rB >= rA) goto reladdr9
# => jge rB, rA, reladdr9
#
:jae eregA, regA, jaddr9e is group=7 & ins0412=0x90 & regA; eregA & jaddr9e
{
    if (eregA >= regA)
        goto jaddr9e;
}

# Jump to jaddr9e if unsigned value of rB <= rA
# if (rB <= rA) goto reladdr9
# => jbe rB, rA, reladdr9
#
:jbe eregA, regA, jaddr9e is group=7 & ins0412=0xC8 & regA; eregA & jaddr9e
{
    if (eregA <= regA)
        goto jaddr9e;
}

# Jump to jaddr9e if unsigned value of rB <= rA
# if (rB <= rA) goto reladdr9
# => jbe rB, rA, reladdr9
#
:je eregA, regA, jaddr9e is group=7 & ins0412=0x80 & regA; eregA & jaddr9e
{
    if (eregA != regA)
        goto jaddr9e;
}


##
# Signed conditional jumps (register/imm10)
##

# jump to jaddr9e if signed value of rA is lower than #imm10
# ifs (rA < #imm10) goto jaddr9e
# => jl rA, #imm10, jaddr9e
:jl regA, #imm10, jaddr9e is group=7 & ins0712=0x3b & imm0406s & regA; imm2531 & jaddr9e
[imm10 = (imm0406s << 7) | imm2531;]
{
    if (regA s< imm10)
        goto jaddr9e;
}

# jump to jaddr9e if signed value of rA is greater than #imm10
# ifs (rA > #imm10) goto jaddr9e
# => jg rA, #imm10, jaddr9e
:jg regA, #imm10, jaddr9e is group=7 & ins0712=0x3c & imm0406s & regA; imm2531 & jaddr9e
[imm10 = (imm0406s << 7) | imm2531;]
{
    if (regA s> imm10)
        goto jaddr9e;
}

# jump to jaddr9e if signed value of rA is lower or equal to #imm10
# ifs (rA <= #imm10) goto jaddr9e
# => jle rA, #imm10, jaddr9e
:jle regA, #imm10, jaddr9e is group=7 & ins0712=0x3d & imm0406s & regA; imm2531 & jaddr9e
[imm10 = (imm0406s << 7) | imm2531;]
{
    if (regA s<= imm10)
        goto jaddr9e;
}


# jump to jaddr9e if signed value of rA is greater or equal to #imm10
# ifs (rA >= #imm10) goto jaddr9e
# => jge rA, #imm10, jaddr9e
:jge regA, #imm10, jaddr9e is group=7 & ins0712=0x3a & imm0406s & regA; imm2531 & jaddr9e
[imm10 = (imm0406s << 7) | imm2531;]
{
    if (regA s>= imm10)
        goto jaddr9e;
}

###########################################################################################
# Code repeat     ( Impossible to implement? )
###########################################################################################

#
# rep nwords, rA { <nwords> instruction words }
#
:rep nwords, regA is group=0 & ins0812=0x03 & regA & imm0407
[ nwords = (imm0407 << 1) + 2; ]
{
	RepeatBlock(nwords:1, regA:1);
}

#
# rep nwords, uimm5 { <nwords> instruction words }
#
:rep nwords, imm0812 is group=4 & ins0003=0x0 & imm0407 & imm0812
[ nwords = (imm0407 << 1) + 2; ]
{
	RepeatBlock(nwords:1, imm0812:1);
}
