##################
#
# Shift/Rotate
#
##################

# TODO: if immediate shamt is 0 then it's 32 or 64, if we're doing it with doubled registers

###########################################################################################
# Logical shift left
###########################################################################################

#
# rA <<= rB
# => lsl rA, rB
#
:lsl regAl, regBl is group=0 & ins0712=0x34 & ins0303=0 & regAl & regBl
{
	regAl = regAl << regBl;
}

# 
# rA = rB << shamt
# => lsl rA, rB, shamt
#
:lsl regAl, regBl, imm0812 is group=5 & ins0707=0 & ins0303=0 & regAl & regBl & imm0812
{
	regAl = regBl << imm0812;
}

# 
# rA = rC >> rB (r0 to r15)
# => lsr rA, rB, rC
:lsl eregA, eregB, eregC is group=7 & ins0011=0x1c8 ; eregA & eregC & eregB & imm1619=0
{
	eregA = eregB << eregC;
}

# 
# rA = rC << rB (r0 to r15)
# => lsl rA, rB, rC
:lsl eregA, eregB, eregC is group=7 & ins0011=0x1c8 ; eregA & eregC & eregB & imm1619=1
{
	eregA = eregB << eregC;
}

#
# rA = rB << #imm6
# => lsl rA, rB, imm6
:lsl eregA, eregB, imm6 is group=7 & ins0011=0x1c0 ; eregA & eregB & imm2627=0 & imm2425 & imm1619
[imm6 = (imm2425 << 4) | imm1619;]
{
    eregA = eregB << imm6;
}

###########################################################################################
# Logical shift right
###########################################################################################

#
# rA >>= rB
# => lsr rA, rB
#
:lsr regAl, regBl is group=0 & ins0712=0x35 & ins0303=0 & regAl & regBl
{
	regAl = regAl >> regBl;
}

# 
# rA = rC >> rB (r0 to r15)
# => lsr rA, rB, rC
:lsr eregA, eregB, eregC is group=7 & ins0011=0x1c8 ; eregA & eregC & eregB & imm1619=2
{
	eregA = eregB >> eregC;
}

#
# rA = rB >> shamt
# => lsr rA, rB, shamt
#
:lsr regAl, regBl, imm0812 is group=5 & ins0707=1 & ins0303=0 & regAl & regBl & imm0812
{
	regAl = regBl >> imm0812;
}

#
# rA = rB >> imm6
# => lsl rA, rB, imm6
:lsl eregA, eregB, imm6 is group=7 & ins0011=0x1c0 ; eregA & eregB & imm2627=2 & imm2425 & imm1619
[imm6 = (imm2425 << 4) | imm1619;]
{
    eregA = eregB >> imm6;
}

#
# rA_rB >>= #imm6
#
:lsr edregA, #imm6 is group=7 & ins0011=0x1d0 ; edregA & imm2627=0 & eregB=0 & imm1619 & imm2425
[ imm6 = (imm2425 << 4) | imm1619; ]
{
    edregA = edregA >> imm6;
}

#
# rA_rB <<= #imm6
#
:lsl edregA, #imm6 is group=7 & ins0011=0x1d0 ; edregA & imm2627=2 & eregB=0 & imm1619 & imm2425
[ imm6 = (imm2425 << 4) | imm1619; ]
{
    edregA = edregA << imm6;
}

###########################################################################################
# (Q) Arithmetic shift left
###########################################################################################

### TODO: overflow? ###

#
# rA <<<= rB
# => qasl rA, rB
#
:qasl regAl, regBl is group=0 & ins0712=0x34 & ins0303=1 & regAl & regBl
{
	regAl = regAl << regBl;
}

#
# rA = rB <<< shamt
# => qasl rA, rB, shamt
#
:qasl regAl, regBl, imm0812 is group=5 & ins0707=0 & ins0303=1 & regAl & regBl & imm0812
{
	regAl = regBl << imm0812;
}

#
# rA = rB <<< imm6
# => qasl rA, rB, imm6
:qasl eregA, eregB, imm6 is group=7 & ins0011=0x1c0 ; eregA & eregB & imm2627=1 & imm2425 & imm1619
[imm6 = (imm2425 << 4) | imm1619;]
{
    eregA = eregB << imm6;
}

###########################################################################################
# (Q) Arithmentic shift right
###########################################################################################

#
# rA >>>= rB
# => qasr rA, rB
#
:qasr regAl, regBl is group=0 & ins0712=0x35 & ins0303=1 & regAl & regBl
{
	regAl = regAl s>> regBl;
}

#
# rA = rB >>> shamt
# => qasr rA, rB, shamt
#
:qasr regAl, regBl, imm0812 is group=5 & ins0707=1 & ins0303=1 & regAl & regBl & imm0812
{
	regAl = regBl s>> imm0812;
}

# 
# rA = rC >> rB (r0 to r15)
# => lsr rA, rB, rC
:qasr eregA, eregB, eregC is group=7 & ins0011=0x1c8 ; eregA & eregC & eregB & imm1619=3
{
	eregA = eregB s>> eregC;
}

#
# rA = rB >>> imm6
# => qasr rA, rB, imm6
:qasl eregA, eregB, imm6 is group=7 & ins0011=0x1c0 ; eregA & eregB & imm2627=3 & imm2425 & imm1619
[imm6 = (imm2425 << 4) | imm1619;]
{
    eregA = eregB s>> imm6;
}


###########################################################################################
# Logical shift left + right (used for alignment)
###########################################################################################

#
# rA = rB <> #imm6
#
:lslr eregA, eregB, #imm6 is group=7 & ins0011=0x1c4 ; eregA & eregB & imm2425 & imm1619
[imm6 = (imm2425 << 4) | imm1619;]
{
    eregA = (eregB << imm6) >> imm6;
}